// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Lucas Antonio",
            "email": "lucas.antonio27@outlook.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/register": {
            "post": {
                "description": "Cria uma nova sugestão com os dados informados",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suggestions"
                ],
                "summary": "Criar sugestão",
                "parameters": [
                    {
                        "description": "Dados da nova sugestão",
                        "name": "suggestion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateSuggestionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/suggestions": {
            "get": {
                "description": "Lista todas as sugestões cadastradas no banco de dados",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suggestions"
                ],
                "summary": "Lista as sugestões",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Suggestion"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/suggestions/grouped-by-sector": {
            "get": {
                "description": "Se nenhum setor for informado, retorna sugestões agrupadas por setor. Se um setor for passado, retorna apenas as sugestões com aquele setor.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suggestions"
                ],
                "summary": "Listar sugestões agrupadas ou filtradas por setor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filtrar por setor (ex: IT, HR, Logistics)",
                        "name": "sector",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Suggestion"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/suggestions/grouped-by-status": {
            "get": {
                "description": "Se nenhum status for informado, retorna sugestões agrupadas por status. Se um status for passado, retorna apenas as sugestões com aquele status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suggestions"
                ],
                "summary": "Listar sugestões agrupadas ou filtradas por status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filtrar por status (open, under review, implemented)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Suggestion"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/suggestions/{id}/status": {
            "put": {
                "description": "Altera o status de uma sugestão existente pelo ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suggestions"
                ],
                "summary": "Atualizar status da sugestão",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID da sugestão",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Novo status da sugestão",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateStatusInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateSuggestionInput": {
            "type": "object",
            "properties": {
                "collaborator_name": {
                    "type": "string",
                    "example": "João da Silva"
                },
                "description": {
                    "type": "string",
                    "example": "Sugestão para melhorar o fluxo de trabalho"
                },
                "sector": {
                    "type": "string",
                    "example": "TI"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "erro": {
                    "type": "string"
                }
            }
        },
        "models.Suggestion": {
            "type": "object",
            "properties": {
                "collaborator_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id_suggestion": {
                    "type": "integer"
                },
                "sector": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.UpdateStatusInput": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "open"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:5000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "API Go para o projeto de sugestões",
	Description:      "API de sugestões que faz a criação de sugestôes, retorno de sugestôes e alteração dos status.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
